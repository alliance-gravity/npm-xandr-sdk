import type { XandrClient } from '..';
import type { Segment, Upload, OpenLocationCodeTargetingParameters, CountryRegionTargetingParameters, PostalCodeTargetingParameters, IPRangeTargetingParameters, IPTargetingParameters, UrlTargetingParameters, DeviceTargetingParameters, UploadParameters } from './types';
export declare class XandrAPDClient {
    private readonly client;
    private readonly endpoint;
    private readonly defaultHeaders;
    private readonly defaultDeleteHeaders;
    private defaultSegmentTtl;
    constructor(client: XandrClient);
    setDefaultSegmentTtl(seconds: number): void;
    getOpenLocationCodeTargeting(params: OpenLocationCodeTargetingParameters): Promise<Segment[]>;
    addOpenLocationCodeTargeting(params: OpenLocationCodeTargetingParameters, segments: Segment[]): Promise<void>;
    deleteOpenLocationCodeTargeting(params: OpenLocationCodeTargetingParameters, segmentList: number[]): Promise<void>;
    getCountryRegionTargetging(params: CountryRegionTargetingParameters): Promise<Segment[]>;
    addCountryRegionTargeting(params: CountryRegionTargetingParameters, segments: Segment[]): Promise<void>;
    deleteCountryRegionTargeting(params: CountryRegionTargetingParameters, segmentList: number[]): Promise<void>;
    getPostalCodeTargeting(params: PostalCodeTargetingParameters): Promise<Segment[]>;
    addPostalCodeTargeting(params: PostalCodeTargetingParameters, segments: Segment[]): Promise<void>;
    deletePostalCodeTargeting(params: PostalCodeTargetingParameters, segmentList: number[]): Promise<void>;
    getIPRangeTargeting(params: IPRangeTargetingParameters): Promise<Segment[]>;
    addIPRangeTargeting(params: IPRangeTargetingParameters, segments: Segment[]): Promise<void>;
    deleteIPRangeTargeting(params: IPRangeTargetingParameters, segmentList: number[]): Promise<void>;
    getIPTargeting(params: IPTargetingParameters): Promise<Segment[]>;
    addIPTargeting(params: IPTargetingParameters, segments: Segment[]): Promise<void>;
    deleteIPTargeting(params: IPTargetingParameters, segmentList: number[]): Promise<void>;
    getUrlComponentTargeting(params: UrlTargetingParameters): Promise<Segment[]>;
    addUrlComponentTargeting(params: UrlTargetingParameters, segments: Segment[]): Promise<void>;
    deleteUrlComponentTargeting(params: UrlTargetingParameters, segmentList: number[]): Promise<void>;
    getUrlReferenceTargeting(params: UrlTargetingParameters): Promise<Segment[]>;
    addUrlReferenceTargeting(params: UrlTargetingParameters, segments: Segment[]): Promise<void>;
    deleteUrlReferenceTargeting(params: UrlTargetingParameters, segmentList: number[]): Promise<void>;
    getDeviceTargeting(params: DeviceTargetingParameters): Promise<Segment[]>;
    addDeviceTargeting(params: DeviceTargetingParameters, segments: Segment[]): Promise<void>;
    deleteDeviceTargeting(params: DeviceTargetingParameters, segmentList: number[]): Promise<void>;
    getEvent(memberId: number, segmentList: number[]): Promise<Segment[]>;
    addEvent(memberId: number, segments: Segment[]): Promise<void>;
    deleteEvent(memberId: number, segmentList: number[]): Promise<void>;
    getUploads(memberId: number, id?: string): Promise<Upload[] | undefined>;
    upload(params: UploadParameters): Promise<string>;
    awaitUploadCompletion(memberId: number, id: string, maxTries?: number): Promise<Upload>;
}
